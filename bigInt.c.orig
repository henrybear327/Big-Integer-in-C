#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define N 40

#define TESTING_MODE 1

typedef struct {
  int num[2 * N];
  int isNegative;
} Number;

void printNumber(Number ans) {
  int notZero = 0;
  for (int i = 2 * N - 1; i >= 0; i--) {
    if (ans.num[i] == 0)
      continue;
    else {
      notZero = i;
      break;
    }
  }
  if (notZero == 0 && ans.num[0] == 0)
    ans.isNegative = 0;

  if (ans.isNegative == 1)
    printf("-");
  for (int i = notZero; i >= 0; i--)
    printf("%d", ans.num[i]);
  printf("\n");
}

void subtract(Number *num1, Number *num2, Number *ans);

void add(Number *num1, Number *num2, Number *ans) {
  if (num1->isNegative == num2->isNegative) {
    // 5 + 5, -5 + -5 -> -(5 + 5)

    for (int i = 0; i < N; i++) {
      int sum = num1->num[i] + num2->num[i];
      ans->num[i + 1] += sum / 10;
      ans->num[i] += sum % 10;
    }

    for (int i = 0; i < N; i++) {
      ans->num[i + 1] += ans->num[i] / 10;
      ans->num[i] %= 10;
    }

    if (num1->isNegative == 1) {
      ans->isNegative = (ans->isNegative + 1) % 2;
    }
  } else {
    if (num1->isNegative) {
      // -7 + 5 = 5 + -7 = 5 - +7
      num1->isNegative = (num1->isNegative + 1) % 2;
      subtract(num2, num1, ans);
    } else {
      // 5 + -7 = 5 - +7
      num2->isNegative = (num2->isNegative + 1) % 2;
      subtract(num1, num2, ans);
    }
  }

  int notZero = 0;
  for (int i = 2 * N - 1; i >= 0; i--) {
    if (ans->num[i] == 0)
      continue;
    else {
      notZero = i;
      break;
    }
  }
  if (notZero == 0 && ans->num[0] == 0)
    ans->isNegative = 0;
}

int isLessThan(Number num1, Number num2) {
  int notZero1 = 0;
  for (int i = 2 * N - 1; i >= 0; i--) {
    if (num1.num[i] == 0)
      continue;
    else {
      notZero1 = i;
      break;
    }
  }

  int notZero2 = 0;
  for (int i = 2 * N - 1; i >= 0; i--) {
    if (num2.num[i] == 0)
      continue;
    else {
      notZero2 = i;
      break;
    }
  }

  if (notZero1 < notZero2) {
    return 1;
  } else if (notZero1 > notZero2) {
    return 0;
  } else {
    for (int i = notZero1; i >= 0; i--) {
      if (num1.num[i] != num2.num[i]) {
        if (num1.num[i] < num2.num[i])
          return 1;
        else
          return 0;
      }
    }
    return 0;
  }

  // if (num1.isNegative != num2.isNegative) {
  //     if (num1.isNegative == 1) // - +
  //         return 1;
  //     else // + -
  //         return 0;
  // } else {
  //     if (notZero1 < notZero2) {
  //         if (num1.isNegative == 1) // -3 -55
  //             return 0;
  //         else // 3 55
  //             return 1;
  //     } else if (notZero1 > notZero2) {
  //         if (num1.isNegative == 1) // -33 -5
  //             return 1;
  //         else // 33 5
  //             return 0;
  //     } else {
  //         for (int i = notZero1; i >= 0; i--) {
  //             if (num1.num[i] != num2.num[i]) {
  //                 if (num1.num[i] < num2.num[i])
  //                     return 1;
  //                 else
  //                     return 0;
  //             }
  //         }
  //     }
  // }

  return 0;
}

void subtract(Number *num1, Number *num2, Number *ans) {
  // printNumber(*num1);
  // printNumber(*num2);

  if (num1->isNegative == num2->isNegative) {
    if (isLessThan(*num1, *num2) == 1) {
      // printf("Swap\n");
      ans->isNegative = (ans->isNegative + 1) % 2;
      subtract(num2, num1, ans);
      return;
    }

    // 7 - 5
    // -7 - -5 = -(7 - 5)
    int borrow[N + 1] = {0};
    for (int i = 0; i < N; i++) {
      int diff = borrow[i] + (num1->num[i] - num2->num[i]);

      if (diff < 0) {
        borrow[i + 1] = -1;
        diff += 10;
      }

      ans->num[i] = diff;
    }

    if (num1->isNegative == 1)
      ans->isNegative = (ans->isNegative + 1) % 2;
  } else {
    if (num1->isNegative == 1) {
      // -7 - 5 = -(7 + 5)
      ans->isNegative = (ans->isNegative + 1) % 2;
      num1->isNegative = 0;
      add(num1, num2, ans);
    } else {
      // 7 - -5 = 7 + 5
      num2->isNegative = 0;
      add(num1, num2, ans);
    }
  }

  int notZero = 0;
  for (int i = 2 * N - 1; i >= 0; i--) {
    if (ans->num[i] == 0)
      continue;
    else {
      notZero = i;
      break;
    }
  }
  if (notZero == 0 && ans->num[0] == 0)
    ans->isNegative = 0;
}

void multiply(Number *num1, Number *num2, Number *ans) {
  for (int i = 0; i < N; i++) {   /* num2 */
    for (int j = 0; j < N; j++) { /* num1 */
      int product = num1->num[j] * num2->num[i];
      ans->num[i + j] += product;
    }
  }

  for (int i = 0; i < 2 * N - 1; i++) {
    ans->num[i + 1] += ans->num[i] / 10;
    ans->num[i] %= 10;
  }
}

void setNumber(int numberToSet, Number *num) {
  // printf("Number to set %d\n", numberToSet);

  if (numberToSet < 0) {
    num->isNegative = 1;
    numberToSet *= -1;
  } else
    num->isNegative = 0;

  memset(num->num, 0, sizeof(num->num));

  for (int i = 0; numberToSet > 0; i++) {
    num->num[i] = numberToSet % 10;
    numberToSet /= 10;
  }

  // printf("Set result: ");
  // printNumber(*num);
  // printf("\n");
}

int diff(Number correct, Number ans) {
  if (correct.isNegative != ans.isNegative)
    return 1;

  for (int i = 0; i < 2 * N; i++)
    if (correct.num[i] != ans.num[i])
      return 1;

  return 0;
}

void testAdd() {
  printf("Testing add\n");

  Number num1, num2, ans, correct;
  for (int i = -1000; i <= 1000; i++) {
    for (int j = -1000; j <= 1000; j++) {
      if (abs(i) % 1000 == 0) {
        printf("Testing %d + %d...\n", i, j);
      }

      setNumber(i, &num1);
      setNumber(j, &num2);
      setNumber(0, &ans);

      setNumber(i + j, &correct);

      add(&num1, &num2, &ans);

      // printf("%d + %d = %d -> ", i, j, i + j);
      // printNumber(ans);

      if (diff(correct, ans) == 1) {
        printf("%d + %d = ", i, j);
        printNumber(correct);
        printf("!= ");
        printNumber(ans);
        exit(1);
      }
    }
  }
}

void testSubtract() {
  printf("Testing subtract\n");

  Number num1, num2, ans, correct;
  for (int i = -1000; i <= 1000; i++) {
    for (int j = -1000; j <= 1000; j++) {
      if (abs(i) % 1000 == 0) {
        printf("Testing %d - %d...\n", i, j);
      }

      setNumber(i, &num1);
      setNumber(j, &num2);
      setNumber(0, &ans);

      setNumber(i - j, &correct);

      subtract(&num1, &num2, &ans);

      // printf("%d - %d = %d -> ", i, j, i - j);
      // printNumber(ans);

      if (diff(correct, ans) == 1) {
        printf("%d - %d = ", i, j);
        printNumber(correct);
        printf("!= ");
        printNumber(ans);
        exit(1);
      }
    }
  }
}

void testMultiply() {}

void testDivide() {}

void autoTest() {
  for (int i = 0; i < 4; i++) {
    if (i == 0)
      testAdd();
    else if (i == 1)
      testSubtract();
    else if (i == 2)
      testMultiply();
    else
      testDivide();
  }
}

void convertFromStringToNumber(char str[], Number *num) {
  int len = strlen(str);
  if (str[0] == '-')
    num->isNegative = 1;
  else
    num->isNegative = 0;

  // -1234
  for (int i = 0; i < len - num->isNegative; i++)
    num->num[i] = str[len - i - 1] - '0';
}

int main() {
#if TESTING_MODE == 0
  char number1[2 * N], number2[2 * N];
  while (scanf("%s %s", number1, number2) != EOF) {
    Number num1, num2, ans;

    printf("\nAddition\n");
    convertFromStringToNumber(number1, &num1);
    convertFromStringToNumber(number2, &num2);
    ans.isNegative = 0;
    memset(ans.num, 0, sizeof(ans.num));
    add(&num1, &num2, &ans);
    printNumber(ans);

    printf("\nSubtraction\n");
    convertFromStringToNumber(number1, &num1);
    convertFromStringToNumber(number2, &num2);
    ans.isNegative = 0;
    memset(ans.num, 0, sizeof(ans.num));
    subtract(&num1, &num2, &ans);
    printNumber(ans);

    printf("\nMultiplication\n");
    convertFromStringToNumber(number1, &num1);
    convertFromStringToNumber(number2, &num2);
    ans.isNegative = 0;
    memset(ans.num, 0, sizeof(ans.num));
    multiply(&num1, &num2, &ans);
    printNumber(ans);
  }
#else
  autoTest();
#endif
  return 0;
}
